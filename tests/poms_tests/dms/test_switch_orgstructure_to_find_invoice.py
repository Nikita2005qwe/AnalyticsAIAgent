import pytest
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from src.pages.dms.main_page import MainPage
from src.pages.dms.login_page import LoginPage
from src.pages.dms.subsystems_page import SubsystemsPage
from src.pages.dms.distributor_panel_page import DistributorPanelPage
from src.pages.dms.invoices_page import InvoicesPage
from dotenv import load_dotenv
import os


load_dotenv()


def test_switch_to_novosibirsk_and_find_invoice(driver):
    """–¢–µ—Å—Ç: —Å–º–µ–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ –Ω–∞ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ ‚Üí –ø–æ–∏—Å–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π 05/048027"""
    username = os.getenv("DMS_USERNAME_SIB")
    password = os.getenv("DMS_PASSWORD_SIB")
    assert username, "DMS_USERNAME_SIB –Ω–µ –∑–∞–¥–∞–Ω –≤ .env"
    assert password, "DMS_PASSWORD_SIB –Ω–µ –∑–∞–¥–∞–Ω –≤ .env"

    # --- 1. –í—Ö–æ–¥ ---
    main_page = MainPage(driver)
    main_page.open().accept_region_popup().go_to_login_page()

    login_page = LoginPage(driver)
    assert login_page.is_loaded(), "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å"
    login_page.login(username, password)

    # --- 2. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã ---
    subsystems_page = SubsystemsPage(driver)
    WebDriverWait(driver, 25).until(lambda d: "/subsystems" in d.current_url)
    subsystems_page.go_to_distributor_panel()

    # --- 3. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ DMS ---
    WebDriverWait(driver, 30).until(lambda d: "dms.goodfood.shop" in d.current_url)
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.CLASS_NAME, "side-menu__sections-list"))
    )

    # --- 4. –ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ù–∞–∫–ª–∞–¥–Ω—ã–µ" ---
    distributor_panel = DistributorPanelPage(driver)
    distributor_panel.go_to_section("documents")

    # --- 5. –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
    invoices_page = InvoicesPage(driver)
    assert invoices_page.is_loaded(), "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å"

    # –ñ–¥—ë–º, –ø–æ–∫–∞ –≤ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ—è–≤–∏—Ç—Å—è "–ê–±–∞–∫–∞–Ω"
    try:
        invoices_page.wait_for_default_orgstructure_loaded("–ê–±–∞–∫–∞–Ω", timeout=30)
        current_org = invoices_page.get_current_orgstructure()
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞: {current_org}")
    except Exception as e:
        pytest.fail(f"–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ê–±–∞–∫–∞–Ω): {e}")

    # --- 6. –ü–æ–∏—Å–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π 05/048027 –Ω–∞ –ê–±–∞–∫–∞–Ω–µ ‚Üí –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è ---
    invoices_page.perform_search("05/048027")
    invoices_page.wait_for_search_result()

    assert invoices_page.is_empty(), "–ù–∞–∫–ª–∞–¥–Ω–∞—è 05/048027 –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –ê–±–∞–∫–∞–Ω"
    print("‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è 05/048027 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ê–±–∞–∫–∞–Ω–µ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # --- 7. –°–º–µ–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ –Ω–∞ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ ---
    invoices_page.select_orgstructure_by_city("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")

    # --- 8. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–ª–æ—â–∞–¥–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ---
    new_org = invoices_page.get_current_orgstructure()
    assert "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" in new_org, f"–ü–ª–æ—â–∞–¥–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {new_org}"
    print(f"‚úÖ –ü–ª–æ—â–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_org}")

    # --- 9. –ü–æ–∏—Å–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π 05/048027 ---
    invoices_page.perform_search("05/048027")
    invoices_page.wait_for_search_result()

    found_invoices = invoices_page.get_all_invoices()
    assert not invoices_page.is_empty(), "–ù–∞–∫–ª–∞–¥–Ω–∞—è 05/048027 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ"
    assert len(found_invoices) >= 1, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–ª–æ—â–∞–¥–∫–∏"

    invoice = found_invoices[0]
    assert "05/048027" in invoice["number"], f"–ù–∞–π–¥–µ–Ω–∞ –Ω–µ —Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞—è: {invoice['number']}"
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞—è: {invoice['number']} | –°—É–º–º–∞: {invoice['total']} | –°—Ç–∞—Ç—É—Å: {invoice['status']}")

    print("üéâ –£—Å–ø–µ—à–Ω–æ: —Å–º–µ–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –ø–æ–∏—Å–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")