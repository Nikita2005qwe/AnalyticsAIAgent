from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from src.pages.dms.main_page import MainPage
from src.pages.dms.login_page import LoginPage
from src.pages.dms.subsystems_page import SubsystemsPage
from src.pages.dms.distributor_panel_page import DistributorPanelPage
from src.pages.dms.invoices_page import InvoicesPage
from dotenv import load_dotenv
import os


load_dotenv()


def test_invoices_search_and_validation(driver):
    """–¢–µ—Å—Ç: –ø–æ–∏—Å–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É 02 ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —á—É–∂–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"""
    username = os.getenv("DMS_USERNAME_SIB")
    password = os.getenv("DMS_PASSWORD_SIB")
    assert username, "DMS_USERNAME_SIB –Ω–µ –∑–∞–¥–∞–Ω –≤ .env"
    assert password, "DMS_PASSWORD_SIB –Ω–µ –∑–∞–¥–∞–Ω –≤ .env"

    # --- 1. –í—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç ---
    main_page = MainPage(driver)
    main_page.open().accept_region_popup().go_to_login_page()

    # --- 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
    login_page = LoginPage(driver)
    assert login_page.is_loaded(), "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å"
    login_page.login(username, password)

    # --- 3. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã ---
    subsystems_page = SubsystemsPage(driver)
    WebDriverWait(driver, 25).until(lambda d: "/subsystems" in d.current_url)
    subsystems_page.go_to_distributor_panel()

    # --- 4. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ DMS ---
    WebDriverWait(driver, 30).until(lambda d: "dms.goodfood.shop" in d.current_url)
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.CLASS_NAME, "side-menu__sections-list"))
    )

    # --- 5. –ü–µ—Ä–µ—Ö–æ–¥ –≤ "–ù–∞–∫–ª–∞–¥–Ω—ã–µ" ---
    distributor_panel = DistributorPanelPage(driver)
    distributor_panel.go_to_section("documents")

    # --- 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    invoices_page = InvoicesPage(driver)
    assert invoices_page.is_loaded(), "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å"
    invoices_page.wait_for_search_result()

    # --- 7. –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ ---
    all_invoices = invoices_page.get_all_invoices()
    print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö: {len(all_invoices)}")

    assert len(all_invoices) > 0, "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø—Ä–∏ –ø—É—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ"
    assert all(inv.get("number") for inv in all_invoices), "–ù–∞–π–¥–µ–Ω—ã –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –±–µ–∑ –Ω–æ–º–µ—Ä–∞"
    assert all(invoices_page.is_valid_invoice_number(inv["number"]) for inv in all_invoices), \
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –Ω–æ–º–µ—Ä–∞"

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "02/" (–ê–±–∞–∫–∞–Ω)
    abakan_invoices = [inv for inv in all_invoices if inv["number"].startswith("02/")]
    assert len(abakan_invoices) == len(all_invoices), \
        f"–û–∂–∏–¥–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∏–∑ –ê–±–∞–∫–∞–Ω–∞ (02/...), –Ω–æ –Ω–∞–π–¥–µ–Ω—ã –¥—Ä—É–≥–∏–µ: {[inv['number'] for inv in all_invoices if not inv['number'].startswith('02/')]}"

    # --- 8. –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É 02/ ---
    search_examples = ["02/056718", "056718", "02"]
    for query in search_examples:
        invoices_page.perform_search(query)
        invoices_page.wait_for_search_result()

        results = invoices_page.get_all_invoices()
        assert len(results) > 0, f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"

        search_part = query.replace("02/", "").strip()
        found = False
        for inv in results:
            clean_number = inv["number"].strip().replace("\u00A0", "").replace(" ", "")
            if search_part in clean_number:
                found = True
                break

        assert found, f"–ù–∏ –æ–¥–Ω–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '{search_part}' –≤ –Ω–æ–º–µ—Ä–µ: {[inv['number'] for inv in results]}"

    # --- 9. –ü—Ä–æ–≤–µ—Ä–∫–∞: —á—É–∂–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –ù–ï –Ω–∞—Ö–æ–¥—è—Ç—Å—è ---
    not_found_numbers = ["04/523872", "06/235292", "07/283902", "–ß-898544"]

    for number in not_found_numbers:
        invoices_page.perform_search(number)
        invoices_page.wait_for_search_result()

        assert invoices_page.is_empty(), f"–ù–∞–∫–ª–∞–¥–Ω–∞—è {number} –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π"
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –Ω–∞–∫–ª–∞–¥–Ω–∞—è {number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–π –ø–ª–æ—â–∞–¥–∫–µ)")

    print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã: –ø–æ–∏—Å–∫, –≤–∞–ª–∏–¥–∞—Ü–∏—è, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∫–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")