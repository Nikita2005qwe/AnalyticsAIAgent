# main.py
import sys
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QMessageBox
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QTimer, QUrl


class TasksPlanner(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")
        self.setGeometry(100, 100, 1200, 800)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)

        # –í–µ–±-–ø—Ä–æ—Å–º–æ—Ç—Ä
        self.web_view = QWebEngineView()
        self.load_page()

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.reload_button = QPushButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å")
        self.clear_button = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
        self.reload_button.setStyleSheet("background-color: #007BFF; color: white; font-size: 14px;")
        self.clear_button.setStyleSheet("background-color: #f44336; color: white; font-size: 14px;")

        self.reload_button.clicked.connect(self.load_page)
        self.clear_button.clicked.connect(self.clear_all_tasks)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–∞–∫–µ—Ç
        button_layout = QVBoxLayout()
        button_layout.addWidget(self.reload_button)
        button_layout.addWidget(self.clear_button)

        self.main_layout.addWidget(self.web_view)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –≥—Ä—É–ø–ø—É
        buttons_widget = QWidget()
        buttons_widget.setLayout(button_layout)
        self.main_layout.addWidget(buttons_widget)

        # –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.check_task_completion)
        self.timer.start(60000)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    def load_page(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML –ø–æ file:// URL"""
        html_path = os.path.abspath("index.html")
        if not os.path.exists(html_path):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        url = QUrl.fromLocalFile(html_path)
        self.web_view.load(url)

    def clear_all_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–¥–∞—á–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            self.web_view.page().runJavaScript("""
                tasks = [];
                localStorage.setItem('tasks', JSON.stringify(tasks));
                renderTasks();
            """)
            QMessageBox.information(self, '–ì–æ—Ç–æ–≤–æ', '–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!')

    def check_task_completion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å)"""
        self.web_view.page().runJavaScript("""
            if (typeof tasks !== 'undefined') {
                let hasOverdue = false;
                tasks.forEach(task => {
                    if (!task.completed) {
                        const [h, m] = task.startTime.split(':').map(Number);
                        const duration = parseInt(task.duration);
                        const start = new Date();
                        start.setHours(h, m, 0, 0);
                        const end = new Date(start.getTime() + duration * 60000);
                        const now = new Date();

                        if (now >= end) {
                            hasOverdue = true;
                        }
                    }
                });

                if (hasOverdue) {
                    console.log("–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏!");
                }
            }
        """)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = TasksPlanner()
    window.show()
    sys.exit(app.exec_())