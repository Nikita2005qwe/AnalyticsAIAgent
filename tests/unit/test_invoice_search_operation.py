# tests/test_invoice_search_operation.py

import pytest
from selenium.common.exceptions import WebDriverException

from src.core.logger import Logger
from src.core.config import Config
from src.models.invoice.invoice import Invoice, CheckStatus, CheckedInvoice
from src.buisness_processes.check_invoices.operation import InvoiceSearchOperation


@pytest.fixture
def logger():
    return Logger()


@pytest.fixture
def operation_siberia(logger):
    """–§–∏–∫—Å—Ç—É—Ä–∞: –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –°–∏–±–∏—Ä–∏."""
    config = Config(logger)
    config.load()
    op = InvoiceSearchOperation(region="siberia", logger=logger, config=config)
    yield op
    if op._initialized:
        op.close()


@pytest.fixture
def sample_invoice():
    """–ü—Ä–∏–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∏–∑ –°–∏–±–∏—Ä–∏."""
    return Invoice(
        number="01/195472",
        crm_id="{E3BDA348-F996-E811-811C-005056011415}",
        address="–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π, –≥ –î–∏–≤–Ω–æ–≥–æ—Ä—Å–∫, —É–ª –ë–æ—á–∫–∏–Ω–∞, –¥ 10–ê/3",
        isa_amount=1000.0,
        sfa_amount=500.0,
        prefix="01",
        region="siberia",
        delivery_city="–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"
    )


# --- –¢–ï–°–¢–´ ---


def test_operation_start_siberia(operation_siberia):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Å—Å–∏—è DMS —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –°–∏–±–∏—Ä–∏."""
    operation_siberia.start()

    assert operation_siberia._initialized is True
    assert operation_siberia.invoices_page is not None


def test_check_invoice_found(operation_siberia, sample_invoice, logger):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å FOUND."""
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    operation_siberia.start()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–ª–∞–¥–Ω—É—é
    result = operation_siberia.check_invoice(sample_invoice)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert isinstance(result, CheckedInvoice), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º CheckedInvoice"
    assert result.status == CheckStatus.FOUND
    assert result.invoice.number == sample_invoice.number
    assert result.invoice.region == "siberia"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥
    # (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –º–æ–∫–∞—Ç—å logger, –Ω–æ –∑–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏–º –≤—ã–≤–æ–¥)
    logger.info(f"‚úÖ –¢–µ—Å—Ç: –Ω–∞–∫–ª–∞–¥–Ω–∞—è {sample_invoice.number} ‚Äî —Å—Ç–∞—Ç—É—Å: {result.status}")


def test_check_invoice_not_found(operation_siberia, logger):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NOT_FOUND."""
    operation_siberia.start()

    fake_invoice = Invoice(
        number="99/999999",  # –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä
        crm_id="",
        address="",
        isa_amount=100.0,
        sfa_amount=50.0,
        prefix="99",
        region="siberia",
        delivery_city="–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"
    )

    result = operation_siberia.check_invoice(fake_invoice)

    assert result.status == CheckStatus.NOT_FOUND
    assert result.invoice.number == fake_invoice.number
    logger.info(f"‚úÖ –¢–µ—Å—Ç: –Ω–∞–∫–ª–∞–¥–Ω–∞—è {fake_invoice.number} ‚Äî –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ)")


def test_switch_to_city_success(operation_siberia):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    operation_siberia.start()

    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫
    try:
        operation_siberia._switch_to_city("–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫")
        current = operation_siberia.invoices_page.get_current_orgstructure()
        assert "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫" in current
    except Exception as e:
        pytest.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≥–æ—Ä–æ–¥: {e}")


def test_check_invoice_returns_checked_invoice(operation_siberia, sample_invoice):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ check_invoice –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CheckedInvoice —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º."""
    operation_siberia.start()
    result = operation_siberia.check_invoice(sample_invoice)

    assert hasattr(result, "invoice")
    assert hasattr(result, "status")
    assert isinstance(result.invoice, Invoice)
    assert result.invoice.number == sample_invoice.number


# --- –°–ö–ò–ü–ê–ï–ú–´–ï –¢–ï–°–¢–´ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞) ---


@pytest.mark.manual
def test_check_invoice_real_data_from_excel(operation_siberia, logger):
    """
    –†—É—á–Ω–æ–π —Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∏–∑ Excel.
    –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º.
    """
    # –ü—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–¥–∞–π –Ω–∞–∫–ª–∞–¥–Ω—ã–µ
    test_cases = [

    ]

    operation_siberia.start()

    for inv in test_cases:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {inv.number}")
        result = operation_siberia.check_invoice(inv)
        status = "‚úÖ –ù–∞–π–¥–µ–Ω–∞" if result.status == CheckStatus.FOUND else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
        logger.info(f"{status} ‚Äî {inv.number}")