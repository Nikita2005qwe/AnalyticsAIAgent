"""
tests/test_invoice_checker_process_real.py

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.

–¶–µ–ª—å:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ InvoiceCheckerProcess.run() –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:
  1. –ß–∏—Ç–∞–µ—Ç Excel-—Ñ–∞–π–ª
  2. –§–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ
  3. –°–æ–∑–¥–∞—ë—Ç Invoice-–æ–±—ä–µ–∫—Ç—ã
  4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —á–µ—Ä–µ–∑ InvoiceSearchOperation (—Å —Ä–µ–∞–ª—å–Ω—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º)
  5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç
  6. –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º (—Ç—Ä–µ–±—É–µ—Ç DMS-–¥–æ—Å—Ç—É–ø)
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Excel-—Ñ–∞–π–ª
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ü–µ–Ω–∞—Ä–∏–π
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–∫–∏

–ü—Ä–µ–¥—É—Å–ª–æ–≤–∏–µ:
- –§–∞–π–ª "data/test_invoices.xlsx" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
- –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç—ã: "–º–æ–π –∫—É–± GC", "–º–æ–π –∫—É–± BF", "–º–æ–π –∫—É–± PU"
- –°—Ç–æ–ª–±—Ü—ã: "–ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫", "ID XCRM Parent", "Address Normalized", "ISA", "SFA"
- –ù–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "01/" (–°–∏–±–∏—Ä—å) –∏–ª–∏ "02/" (–£—Ä–∞–ª)
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ DMS (–∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –≤ config.json)
"""

import pytest
from selenium.common.exceptions import WebDriverException, TimeoutException
from src.core.logger import Logger
from src.core.config import Config
from src.buisness_processes.check_invoices.process import InvoiceCheckerProcess


@pytest.fixture
def logger():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Logger, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö."""
    return Logger()


@pytest.mark.real_browser
def test_invoice_checker_process_run_real(logger):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –£—Å–ø–µ—à–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ isa_amount ‚â† 0 –∏ sfa_amount = None
    - –°–æ–∑–¥–∞–Ω–∏–µ Invoice-–æ–±—ä–µ–∫—Ç–æ–≤
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –≤ DMS (—á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    process = None
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        config = Config(logger=logger)
        config.load()

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å
        process = InvoiceCheckerProcess(logger=logger, config=config)

        # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
        file_path = "data/SO –ø—Ä–æ–¥–∞–∂–∏_—Å–≤–µ—Ä–∫–∞ ISA_SFA 08.2025 001.xlsx"

        logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª...")
        assert (
            __import__("os").path.exists(file_path)
        ), f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∏–∑ {file_path}...")
        process.run(file_path)

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω
        report_path = "data/report_of_checking_invoices.xlsx"
        assert __import__("os").path.exists(report_path), f"–û—Ç—á—ë—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω: {report_path}"
        logger.info(f"üìÑ –û—Ç—á—ë—Ç –Ω–∞–π–¥–µ–Ω: {report_path}")

    except AssertionError as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
    except TimeoutException as e:
        pytest.fail(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
    except WebDriverException as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ WebDriver (–±—Ä–∞—É–∑–µ—Ä —É–ø–∞–ª): {e}")
    except Exception as e:
        pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
    finally:
        if process and hasattr(process, "operator") and process.operator:
            logger.info("üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ operator.close()...")
            try:
                process.operator.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä, –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ operator: {e}")

        logger.info("üîö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")