# tests/test_invoice_search_operation_real.py

import pytest
from selenium.common.exceptions import TimeoutException, WebDriverException

from src.core.logger import Logger
from src.core.config import Config
from src.buisness_processes.check_invoices.operation import InvoiceSearchOperation


@pytest.fixture
def logger():
    """–ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å."""
    return Logger()

@pytest.mark.real_browser
def test_invoice_search_operation_start_siberia(logger):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: –∑–∞–ø—É—Å–∫ InvoiceSearchOperation –¥–ª—è –°–∏–±–∏—Ä–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é: –≤—Ö–æ–¥, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
    """
    operation = None
    try:
        # –°–æ–∑–¥–∞—ë–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –°–∏–±–∏—Ä–∏
        config = Config(logger)
        config.load()
        operation = InvoiceSearchOperation(region="siberia", logger=logger, config=config)

        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ start() –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ 'siberia'...")
        operation.start()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        assert operation._initialized is True, "–°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
        assert operation.invoices_page is not None, "InvoicesPage –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert operation.invoices_page.is_loaded() is True, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"

        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ DMS –∏ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö")

    except TimeoutException as e:
        pytest.fail(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
    except WebDriverException as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ WebDriver: {e}")
    except Exception as e:
        pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if operation:
            logger.info("üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
            operation.close()