"""
–ú–æ–¥—É–ª—å: application.py

–û—Å–Ω–æ–≤–Ω–æ–µ GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É.
"""

import sys
from typing import List, Type
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QPushButton, QTextEdit, QTabWidget, QFrame
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont


# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ ---
class TabInterface:
    @staticmethod
    def create_widget(log_callback) -> QWidget:
        raise NotImplementedError


# --- –ó–∞–≥–ª—É—à–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ) ---
class PointManager:
    def create_trade_points(self, data): return {"success": len(data), "errors": []}
    def reassign_esr_bulk(self, ids, esr): return {"success": len(ids), "new_esr": esr}


class Application:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.qt_app = QApplication(sys.argv)
        self.main_window = QMainWindow()
        self.main_window.setWindowTitle("üß† AI-–ê–≥–µ–Ω—Ç –¥–ª—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        self.main_window.resize(1100, 750)

        self.point_manager = PointManager()
        self.tabs_registry: List[Type[TabInterface]] = []
        self._register_tabs()
        self._setup_ui()

    def _register_tabs(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏."""
        from src.buisness_processes.check_invoices.view import CheckInvoicesWidget

        class CheckInvoicesTab(TabInterface):
            @staticmethod
            def create_widget(log_callback):
                return CheckInvoicesWidget(log_callback=log_callback)

        self.tabs_registry.append(CheckInvoicesTab)

        # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –±—É–¥—É—â–µ–º
        # class CreateTradePointsTab(TabInterface): ...
        # self.tabs_registry.append(CreateTradePointsTab)

    def _setup_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        central = QWidget()
        self.main_window.setCentralWidget(central)
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("AI-–ê–≥–µ–Ω—Ç –¥–ª—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin: 10px;")
        layout.addWidget(title)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        layout.addWidget(line)

        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()

        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–∫–ª–∞–¥–∫–∏ (–ø—Ä–∏–º–µ—Ä)
        tabs.addTab(self._create_trade_point_tab(), "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û")
        tabs.addTab(self._create_data_tab(), "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

        # –õ–æ–≥
        layout.addWidget(QLabel("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:"))
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        self.log_area.setStyleSheet("background-color: #f8f9fa; font-family: 'Courier'; font-size: 12px;")
        self.log_area.setMaximumHeight(200)
        layout.addWidget(self.log_area)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–∫–ª–∞–¥–∫–∏
        for tab_class in self.tabs_registry:
            try:
                widget = tab_class.create_widget(log_callback=self._log)
                tab_name = self._get_tab_name(tab_class)
                tabs.addTab(widget, tab_name)
                self._log(f"üìå –í–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {tab_name}")
            except Exception as e:
                self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏: {e}")

        layout.addWidget(tabs)



        central.setLayout(layout)

    def _get_tab_name(self, tab_class: Type[TabInterface]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è –≤–∫–ª–∞–¥–∫–∏ –ø–æ –∫–ª–∞—Å—Å—É."""
        name = tab_class.__name__
        if "CheckInvoices" in name: return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö"
        if "CreateTradePoints" in name: return "–°–æ–∑–¥–∞–Ω–∏–µ –¢–¢"
        return name.replace("Tab", "").replace("Widget", "")

    # --- –ü—Ä–∏–º–µ—Ä—ã –≤–∫–ª–∞–¥–æ–∫ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å) ---
    def _create_trade_point_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(QLabel("üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞)"))
        btn = QPushButton("–ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏")
        btn.clicked.connect(lambda: self._log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞"))
        layout.addWidget(btn)
        tab.setLayout(layout)
        return tab

    def _create_data_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(QLabel("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)"))
        btn = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON")
        btn.clicked.connect(lambda: self._log("–ó–∞–≥—Ä—É–∑–∫–∞ JSON"))
        layout.addWidget(btn)
        tab.setLayout(layout)
        return tab

    def _log(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–µ–º."""
        from datetime import datetime
        ts = datetime.now().strftime("%H:%M:%S")
        self.log_area.append(f"[{ts}] {message}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        self.main_window.show()
        sys.exit(self.qt_app.exec_())