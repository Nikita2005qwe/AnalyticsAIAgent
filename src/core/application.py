"""
–ú–æ–¥—É–ª—å: application.py

–ö–ª–∞—Å—Å Application ‚Äî –æ—Å–Ω–æ–≤–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.
–Ø–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ GUI –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä.)
- –û–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥-–æ–±–ª–∞—Å—Ç—å

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ –±–∞–∑–µ QMainWindow
- –í–∫–ª–∞–¥–∫–∏: ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û¬ª, ¬´–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö¬ª –∏ –¥—Ä.
- –ü–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π: _on_create_single, _on_reassign_single, _on_bulk_reassign –∏ –¥—Ä.
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PointManager –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü–∏–π

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- PyQt5 ‚Äî —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- src.business.point_manager.PointManager ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
"""

import sys
from typing import Any, Dict, List
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QPushButton,
    QTextEdit,
    QLineEdit,
    QTabWidget,
    QFileDialog,
    QFrame,
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π PointManager
class PointManager:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏. –ü–æ–∫–∞ —ç–º—É–ª–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫—É –¢–û."""
    def create_trade_points(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        return {"success": len(data), "errors": []}

    def reassign_esr_bulk(self, point_ids: List[str], new_esr: str) -> Dict[str, Any]:
        return {"success": len(point_ids), "failed": 0, "new_esr": new_esr}


class Application:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.qt_app = QApplication(sys.argv)
        self.main_window = QMainWindow()
        self.main_window.setWindowTitle("üß† AI-–ê–≥–µ–Ω—Ç –¥–ª—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        self.main_window.resize(1100, 750)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        self.point_manager = PointManager()

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.log_area: QTextEdit
        self.bulk_input: QTextEdit

        self._setup_ui()

    def _setup_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        central_widget = QWidget()
        self.main_window.setCentralWidget(central_widget)
        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("AI-–ê–≥–µ–Ω—Ç –¥–ª—è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setStyleSheet("color: #2c3e50; margin: 10px;")
        layout.addWidget(title)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        layout.addWidget(line)

        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()

        # --- –í–∫–ª–∞–¥–∫–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û ---
        tab_to = self._create_trade_point_tab()
        tabs.addTab(tab_to, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–û")

        # --- –í–∫–ª–∞–¥–∫–∞: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        tab_data = self._create_data_tab()
        tabs.addTab(tab_data, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

        layout.addWidget(tabs)

        # --- –õ–æ–≥ ---
        layout.addWidget(QLabel("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:"))
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        self.log_area.setStyleSheet("background-color: #f8f9fa; font-family: 'Courier';")
        self.log_area.setMaximumHeight(200)
        layout.addWidget(self.log_area)

        central_widget.setLayout(layout)

    def _create_trade_point_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞—ë—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏."""
        tab = QWidget()
        layout = QVBoxLayout()

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –¢–û ---
        layout.addWidget(QLabel("üîπ –°–æ–∑–¥–∞—Ç—å –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É"))
        grid = self._create_input_grid(
            fields=["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–ê–¥—Ä–µ—Å", "–¢–∏–ø –¢–¢", "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ", "–ü–ª–æ—â–∞–¥—å", "–∫–æ–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"],
            prefix="create_"
        )
        layout.addLayout(grid)

        btn_create_single = QPushButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É")
        btn_create_single.clicked.connect(self._on_create_single)
        layout.addWidget(btn_create_single)

        # --- –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ---
        layout.addWidget(QLabel("\nüîπ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ JSON"))
        self.bulk_input = QTextEdit()
        self.bulk_input.setPlaceholderText('–°–ø–∏—Å–æ–∫ –¢–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n[{"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç": "...", "–ê–¥—Ä–µ—Å": "...", ...}]')
        self.bulk_input.setMaximumHeight(120)
        layout.addWidget(self.bulk_input)

        btn_bulk_create = QPushButton("üìÅ –°–æ–∑–¥–∞—Ç—å –∏–∑ JSON")
        btn_bulk_create.clicked.connect(self._on_bulk_create)
        layout.addWidget(btn_bulk_create)

        # --- –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ ---
        layout.addWidget(QLabel("\nüîπ –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –¢–û –∫ –Ω–æ–≤–æ–º—É ESR"))
        reassign_layout = QHBoxLayout()
        self.le_reassign_esr = QLineEdit()
        self.le_reassign_esr.setPlaceholderText("–ù–æ–≤—ã–π –∫–æ–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏ (ESR)")
        reassign_layout.addWidget(self.le_reassign_esr)
        btn_reassign = QPushButton("üîÑ –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞—Ç—å –≤—Å–µ")
        btn_reassign.clicked.connect(self._on_reassign_bulk)
        reassign_layout.addWidget(btn_reassign)
        layout.addLayout(reassign_layout)

        tab.setLayout(layout)
        return tab

    def _create_data_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞—ë—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        tab = QWidget()
        layout = QVBoxLayout()

        layout.addWidget(QLabel("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–°"))
        layout.addWidget(QLabel("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ 1–°."))

        btn_load_json = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –∏–∑ 1–°")
        btn_load_json.clicked.connect(self._on_load_json)
        layout.addWidget(btn_load_json)

        self.label_file_status = QLabel("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        layout.addWidget(self.label_file_status)

        tab.setLayout(layout)
        return tab

    def _create_input_grid(self, fields: List[str], prefix: str) -> QVBoxLayout:
        """–°–æ–∑–¥–∞—ë—Ç —Å–µ—Ç–∫—É –ø–æ–ª–µ–π –≤–≤–æ–¥–∞."""
        layout = QVBoxLayout()
        grid = QHBoxLayout()
        col1 = QVBoxLayout()
        col2 = QVBoxLayout()

        self._input_fields = {}

        for i, field in enumerate(fields):
            label = QLabel(f"{field}:")
            line_edit = QLineEdit()
            line_edit.setPlaceholderText(f"–í–≤–µ–¥–∏—Ç–µ {field.lower()}")
            self._input_fields[f"{prefix}{field}"] = line_edit

            (col1 if i % 2 == 0 else col2).addWidget(label)
            (col1 if i % 2 == 0 else col2).addWidget(line_edit)

        grid.addLayout(col1)
        grid.addLayout(col2)
        layout.addLayout(grid)
        return layout

    def _on_create_single(self):
        """
        
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏.
        
        –¢—É—Ç –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏.
        """
        data = {}
        for key, field in self._input_fields.items():
            if key.startswith("create_"):
                value = field.text().strip()
                if not value:
                    self._log(f"‚ö†Ô∏è –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ: {key[7:]}")
                    return
                data[key[7:]] = value

        try:
            result = self.point_manager.create_trade_points([data])
            self._log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¢–û: {data['–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç']} ‚Üí {data['–ê–¥—Ä–µ—Å']}")
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")

    def _on_bulk_create(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ JSON.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–ª–∞—Å—Å–∞–º –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–º –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –¢–¢
        """
        json_text = self.bulk_input.toPlainText().strip()
        if not json_text:
            self._log("‚ö†Ô∏è JSON –ø—É—Å—Ç")
            return

        try:
            import json
            data_list = json.loads(json_text)
            if not isinstance(data_list, list):
                raise ValueError("–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
            result = self.point_manager.create_trade_points(data_list)
            self._log(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {result['success']} —Ç–æ—á–µ–∫. –û—à–∏–±–æ–∫: {len(result['errors'])}")
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _on_reassign_bulk(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤–æ–π –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏.
        
        
        –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ ESR –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω GUID
        """
        new_esr = self.le_reassign_esr.text().strip()
        if not new_esr:
            self._log("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏ (ESR)")
            return

        try:
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ ID –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Ñ–∞–π–ª–∞
            mock_ids = ["T001", "T002"]  # –ü—Ä–∏–º–µ—Ä
            result = self.point_manager.reassign_esr_bulk(mock_ids, new_esr)
            self._log(f"üîÑ –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω–æ {result['success']} —Ç–æ—á–µ–∫ –∫ ESR: {new_esr}")
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–µ: {e}")

    def _on_load_json(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞ –∏–∑ 1–°.
        
        
        """
        file_path, _ = QFileDialog.getOpenFileName(
            self.main_window,
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –∏–∑ 1–°",
            "",
            "JSON Files (*.json);;All Files (*)"
        )
        if file_path:
            self.label_file_status.setText(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {file_path.split('/')[-1]}")
            self._log(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_path}")
        else:
            self.label_file_status.setText("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    def _log(self, message: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π.
        
        –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å Logger
        """
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_area.append(f"[{timestamp}] {message}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        self.main_window.show()
        sys.exit(self.qt_app.exec_())