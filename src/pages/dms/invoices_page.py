from selenium.webdriver import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import re


class InvoicesPage:
    def __init__(self, driver):
        self.driver = driver

        # üîπ –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_input_locator = (
            By.XPATH,
            "//input[@placeholder='–ü–æ–∏—Å–∫' and contains(@class, 'gui-input-field-element')]"
        )

        # üîπ –í—ã–±–æ—Ä –ø–ª–æ—â–∞–¥–∫–∏ (–æ—Ä–≥—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        self.orgstructure_input_locator = (
            By.XPATH,
            "//input[contains(@class, 'gui-select__input') and @title]"
        )

        # üîπ –°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π (–≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫)
        self.orgstructure_dropdown_locator = (
            By.CLASS_NAME, "gui-select__options"
        )
        self.orgstructure_option_locator = (
            By.XPATH,
            "//div[contains(@class, 'gui-select__option') and contains(text(), '{city}')]"
        )
        # üîπ –¢–∞–±–ª–∏—Ü–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_table_locator = (
            By.CSS_SELECTOR,
            "gui-table.invoice-list.invoice-list--loading"
        )

        # üîπ –¢–∞–±–ª–∏—Ü–∞
        self.table_body_locator = (By.CLASS_NAME, "gui-table-body")
        self.table_row_locator = (By.TAG_NAME, "tr")
        self.table_cell_locator = (By.TAG_NAME, "td")

        # üîπ –°–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        self.empty_message_locator = (
            By.XPATH,
            "//div[contains(@class, 'empty-message') or contains(text(), '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö') or contains(text(), '–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')]"
        )

        # üîπ –°–ª–æ–≤–∞—Ä—å –∫–æ–ª–æ–Ω–æ–∫
        self.columns = {
            "number": "invoiceNumber",
            "date": "invoiceDate",
            "order": "orderNumber",
            "org": "organization",
            "outlet": "outlet",
            "orgstructure": "orgstructure",
            "store": "store",
            "delivery_date": "deliveryDate",
            "total": "total",
            "status": "status",
        }

    def is_loaded(self):
        """–ñ–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏."""
        wait = WebDriverWait(self.driver, 30)

        try:
            # –°–Ω–∞—á–∞–ª–∞ –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
            wait.until(
                EC.presence_of_element_located((By.CLASS_NAME, "invoice-list"))
            )
            # –ó–∞—Ç–µ–º –∂–¥—ë–º, –ø–æ–∫–∞ —É–π–¥—ë—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            wait.until_not(
                EC.presence_of_element_located(self.loading_table_locator)
            )
            return True
        except:
            return False

    def wait_for_search_result(self):
        wait = WebDriverWait(self.driver, 3)

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—ã–π tbody (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            old_tbody = self.driver.find_element(*self.table_body_locator)
        except:
            old_tbody = None

        # –ñ–¥—ë–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            wait.until_not(
                EC.presence_of_element_located(self.loading_table_locator)
            )
        except:
            pass

        # –ï—Å–ª–∏ –±—ã–ª —Å—Ç–∞—Ä—ã–π tbody ‚Äî –∂–¥—ë–º, —á—Ç–æ –æ–Ω –∏—Å—á–µ–∑
        if old_tbody:
            try:
                wait.until(EC.staleness_of(old_tbody))
            except:
                pass

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        wait.until(
            lambda d: self.is_empty() or len(self.get_rows()) > 0,
            message="–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"
        )
        return self
    
    def is_invoice_found(self, expected_number: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –Ω–∞–∫–ª–∞–¥–Ω–∞—è —Å —Ç–æ—á–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.
        """
        rows = self.get_rows()
        for row in rows:
            data = self.get_invoice_data(row)
            invoice_number = data.get("number", "").strip()
            if invoice_number == expected_number:
                return True
        return False

    def element_exists(self, element):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å—ë –ª–∏ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç."""
        try:
            element.is_displayed()
            return True
        except:
            return False

    def perform_search(self, query: str):
        """–û—á–∏—â–∞–µ—Ç –∏ –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞."""
        search_input = WebDriverWait(self.driver, 20).until(
            EC.visibility_of_element_located(self.search_input_locator)
        )
        search_input.click()
        search_input.clear()
        search_input.send_keys(query)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sleep(0.3), –µ—Å–ª–∏ –≤–≤–æ–¥ "—Ä–≤—ë—Ç—Å—è"
        return self

    def get_current_orgstructure(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É (–∏–∑ title)."""
        try:
            input_field = self.driver.find_element(*self.orgstructure_input_locator)
            return input_field.get_attribute("title").strip()
        except:
            return ""

    def wait_for_default_orgstructure_loaded(self, region: str, timeout=30):
        """
        –ñ–¥—ë—Ç, –ø–æ–∫–∞ –≤ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º.
        """
        dict_of_region = {
            "siberia": "–ê–±–∞–∫–∞–Ω",
            "ural": "–ö—É—Ä–≥–∞–Ω"
        }
        WebDriverWait(self.driver, timeout).until(
            lambda d: dict_of_region[region] in self.get_current_orgstructure()
        )
        return self

    def select_orgstructure_by_city(self, city: str):
        """
        –ú–µ–Ω—è–µ—Ç –ø–ª–æ—â–∞–¥–∫—É, –≤–≤–æ–¥—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–æ–ª–µ –∏ –Ω–∞–∂–∏–º–∞—è Enter.
        –ü—Ä–∏–º–µ—Ä: select_orgstructure_by_city("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
        """
        expected_text = f"–û–û–û ¬´–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç¬ª ({city})"

        # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input_field = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable(self.orgstructure_input_locator)
        )

        # 2. –û—á–∏—â–∞–µ–º –ø–æ–ª–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        input_field.click()  # –ö–ª–∏–∫–∞–µ–º, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
        input_field.send_keys(Keys.CONTROL + "a")  # –í—ã–¥–µ–ª—è–µ–º –≤—Å—ë
        input_field.send_keys(Keys.DELETE)  # –£–¥–∞–ª—è–µ–º

        # 3. –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏
        input_field.send_keys(expected_text)
        print(f"‚å®Ô∏è –í–≤–µ–¥–µ–Ω–æ –≤ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞: {expected_text}")

        # 4. –ù–∞–∂–∏–º–∞–µ–º Enter
        input_field.send_keys(Keys.ENTER)
        print("‚úÖ –ù–∞–∂–∞—Ç–æ Enter ‚Äî –≤—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

        # 5. –ñ–¥—ë–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
        WebDriverWait(self.driver, 15).until(
            lambda d: city in self.get_current_orgstructure()
        )
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è –ø–ª–æ—â–∞–¥–∫–∞: {self.get_current_orgstructure()}")

        return self

    def get_rows(self):
        """
        –í—Å–µ–≥–¥–∞ –∏—â–µ—Ç —Å–≤–µ–∂–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.
        """
        try:
            # –Ø–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º tbody –∏ —Å—Ç—Ä–æ–∫–∏
            tbody = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located(self.table_body_locator)
            )
            rows = tbody.find_elements(*self.table_row_locator)
            return [
                row for row in rows
                if len(row.find_elements(By.TAG_NAME, "td")) > 0
            ]
        except:
            return []

    def get_invoice_data(self, row):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {number: ..., date: ..., total: ...}
        """
        cells = row.find_elements(*self.table_cell_locator)
        if len(cells) < len(self.columns):
            return {}

        data = {}
        for col_key, col_name in self.columns.items():
            # –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫—É –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É gui-col-name
            cell = row.find_element(By.CSS_SELECTOR, f"[gui-col-name='{col_name}']")
            text = cell.text.strip().replace("\u00A0", " ")  # –ó–∞–º–µ–Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞
            data[col_key] = text
        return data

    def get_all_invoices(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö (–≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π)."""
        rows = self.get_rows()
        invoices = []
        for row in rows:
            data = self.get_invoice_data(row)
            if data.get("number"):  # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –µ—Å—Ç—å
                invoices.append(data)
        return invoices

    def is_empty(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'."""
        try:
            message = self.driver.find_element(*self.empty_message_locator)
            return message.is_displayed()
        except:
            return False

    def is_valid_invoice_number(self, number: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: XX/XXXXXX –∏–ª–∏ –ß-XXXXXX."""
        number = number.strip()
        pattern = r"^(\d{2}/\d{6}|–ß-\d{6})$"
        return bool(re.match(pattern, number))