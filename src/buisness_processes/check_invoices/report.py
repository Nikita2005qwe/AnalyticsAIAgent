"""
–ú–æ–¥—É–ª—å: report.py
–û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
- –°–æ–∑–¥–∞–Ω–∏–µ Excel-–æ—Ç—á—ë—Ç–∞ —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏:
  1. "–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º" ‚Äî —Ç–æ–ª—å–∫–æ not_found, –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º (–≥–æ—Ä–æ–¥–∞)
  2. "–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç" ‚Äî –≤—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Ü–≤–µ—Ç–∞–º–∏
- –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç openpyxl –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- openpyxl
- CheckedInvoice, CheckStatus, Invoice ‚Äî –∏–∑ –º–æ–¥–µ–ª–∏
"""

from openpyxl import Workbook, load_workbook
from openpyxl.styles import PatternFill, Font, Alignment
from openpyxl.utils import get_column_letter
from typing import List, Dict, Any
import os

from src.core.logger import Logger
from src.models.invoice.invoice import CheckedInvoice, CheckStatus


# === –¶–≤–µ—Ç–∞ ===
FILL_FOUND = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")      # üü©
FILL_NOT_FOUND = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")  # üü•
FILL_ERROR = PatternFill(start_color="FFFF99", end_color="FFFF99", fill_type="solid")      # üü®
FILL_HEADER = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")    # üîµ
FONT_HEADER = Font(color="FFFFFF", bold=True)


class ReporterOfCheckInvoiceProcess:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - report_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á—ë—Ç–∞
    - data (List[CheckedInvoice]): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
    """

    def __init__(self, file_name: str, data: list[CheckedInvoice], logger: Logger):
        self.report_file = file_name
        self.data = data
        self.logger = logger

    def create_report(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        wb = Workbook()
        wb.remove(wb.active)  # —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç

        # –õ–∏—Å—Ç 1: –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        self._create_not_found_by_city_sheet(wb)

        # –õ–∏—Å—Ç 2: –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
        self._create_full_report_sheet(wb)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            wb.save(self.report_file)
            print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {os.path.abspath(self.report_file)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            raise

    def update_report(self, report_path: str, data: List[CheckedInvoice]):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á—ë—Ç:
        - –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–∏—Å—Ç—ã
        - –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
        """
        try:
            wb = load_workbook(report_path)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–∏—Å—Ç—ã
            for sheet_name in ["–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º", "–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç"]:
                if sheet_name in wb.sheetnames:
                    del wb[sheet_name]

            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
            self.data = data
            self._create_not_found_by_city_sheet(wb)
            self._create_full_report_sheet(wb)

            wb.save(report_path)
            self.logger.info(f"‚úÖ –û—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {report_path}")
            self.open_report()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            raise

    def _create_not_found_by_city_sheet(self, wb):
        """–°–æ–∑–¥–∞—ë—Ç –ª–∏—Å—Ç —Å –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏, –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –≤ DMS, –ø–æ –≥–æ—Ä–æ–¥–∞–º (—Å—Ç–æ–ª–±—Ü—ã)"""
        ws = wb.create_sheet(title="–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ not_found
        not_found_invoices = [
            ci for ci in self.data
            if ci.status == CheckStatus.NOT_FOUND
        ]

        if not not_found_invoices:
            ws["A1"] = "–ù–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'not_found'"
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É
        cities = self._group_by_city(not_found_invoices)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –≥–æ—Ä–æ–¥–∞
        for col_idx, city in enumerate(sorted(cities.keys()), 1):
            cell = ws.cell(row=1, column=col_idx, value=city)
            cell.font = FONT_HEADER
            cell.fill = FILL_HEADER
            cell.alignment = Alignment(horizontal="center")

            # –ù–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
            for row_offset, ci in enumerate(cities[city], 2):
                ws.cell(row=row_offset, column=col_idx, value=ci.invoice.number)

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã
        self._auto_adjust_columns(ws)

    def _create_full_report_sheet(self, wb):
        """–°–æ–∑–¥–∞—ë—Ç –ª–∏—Å—Ç —Å –ø–æ–ª–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º –ø–æ –≤—Å–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–º, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
        ws = wb.create_sheet(title="–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç")

        headers = ["–ù–æ–º–µ—Ä", "CRM ID", "–ê–¥—Ä–µ—Å", "ISA", "SFA", "–ì–æ—Ä–æ–¥", "–ü—Ä–µ—Ñ–∏–∫—Å", "–†–µ–≥–∏–æ–Ω", "–°—Ç–∞—Ç—É—Å"]
        current_row = 1

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É
        all_invoices = [ci for ci in self.data]
        cities = self._group_by_city(all_invoices, key=lambda ci: ci.invoice.delivery_city)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞
        for city in sorted(cities.keys()):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–æ—Ä–æ–¥–∞
            cell = ws.cell(row=current_row, column=1, value=city)
            cell.font = FONT_HEADER
            cell.fill = FILL_HEADER
            cell.alignment = Alignment(horizontal="center")
            ws.merge_cells(start_row=current_row, start_column=1, end_row=current_row, end_column=9)
            current_row += 1

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            if current_row == 2 or (current_row > 2 and city == sorted(cities.keys())[0]):
                for col_idx, header in enumerate(headers, 1):
                    cell = ws.cell(row=current_row, column=col_idx, value=header)
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="D9E2F3", end_color="D9E2F3", fill_type="solid")
                current_row += 1

            # –î–∞–Ω–Ω—ã–µ
            for ci in cities[city]:
                row = [
                    ci.invoice.number,
                    ci.invoice.crm_id,
                    ci.invoice.address,
                    ci.invoice.isa_amount,
                    ci.invoice.sfa_amount if ci.invoice.sfa_amount is not None else "",
                    ci.invoice.delivery_city,
                    ci.invoice.prefix,
                    ci.invoice.region,
                    ci.status.value
                ]
                for col_idx, value in enumerate(row, 1):
                    cell = ws.cell(row=current_row, column=col_idx, value=value)
                    self._apply_status_fill(cell, ci.status)

                current_row += 1

            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
            current_row += 1

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã
        self._auto_adjust_columns(ws)

        # –ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞
        for cell in ws['C']:
            cell.alignment = Alignment(wrap_text=True, vertical="top")

    def _group_by_city(self, items: List[Any], key=None) -> Dict[str, List]:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏.

        :param items: –°–ø–∏—Å–æ–∫ CheckedInvoice –∏–ª–∏ –ª—é–±—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        :param key: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ci.invoice.delivery_city)
        :return: –°–ª–æ–≤–∞—Ä—å {–≥–æ—Ä–æ–¥: [–Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã]}
        """
        if key is None:
            key = lambda ci: ci.invoice.delivery_city

        grouped = {}
        for item in items:
            city = key(item)
            if city not in grouped:
                grouped[city] = []
            if hasattr(item, 'invoice'):
                grouped[city].append(item)
            else:
                grouped[city].append(item)
        return grouped

    def _apply_status_fill(self, cell, status: CheckStatus):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–ª–∏–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
        if status == CheckStatus.FOUND:
            cell.fill = FILL_FOUND
        elif status == CheckStatus.NOT_FOUND:
            cell.fill = FILL_NOT_FOUND
        elif status == CheckStatus.ERROR:
            cell.fill = FILL_ERROR

    def _auto_adjust_columns(self, ws):
        """–ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤"""
        for col in ws.columns:
            max_length = 0
            for cell in col:
                try:
                    if cell.value and len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[get_column_letter(col[0].column)].width = adjusted_width

    def open_report(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç—á—ë—Ç–Ω—ã–π —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π."""
        try:
            abs_path = os.path.abspath(self.report_file)
            if not os.path.exists(abs_path):
                self.logger.error(f"‚ùå –§–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {abs_path}")
                return

            if os.name == "nt":  # Windows
                os.startfile(abs_path)
            elif os.name == "posix":  # macOS, Linux
                import subprocess
                if "darwin" in os.uname().sysname:  # macOS
                    subprocess.run(["open", abs_path])
                else:  # Linux
                    subprocess.run(["xdg-open", abs_path])
            print(f"üìÇ –û—Ç—á—ë—Ç –æ—Ç–∫—Ä—ã—Ç: {abs_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç: {e}")